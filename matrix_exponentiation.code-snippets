{
	// Place your global snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and 
	// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope 
	// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is 
	// used to trigger the snippet and the body will be expanded and inserted. Possible variables are: 
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. 
	// Placeholders with the same ids are connected.
	// Example:
	"Print to console": {
		"scope": "cpp",
		"prefix": "matrixExponentiation",
		"body": [
			"struct Mat",
			"{",
			"\tint m[s][s];",
			"\tMat()",
			"\t{",
			"\t\tmemset(m,0, sizeof(m));",
			"\t}",
			"\tvoid identity()",
			"\t{",
			"\t\tm[0][0] = m[1][1] = 1;",
			"\t\tm[0][1] = m[1][0] = 0;",
			"\t}",
			"\tMat operator*(Mat a)",
			"\t{",
			"\t\tMat res;",
			"\t\tfor (int i = 0; i < s; i++)",
			"\t\t{",
			"\t\t\tfor (int j = 0; j < s; j++)",
			"\t\t\t{",
			"\t\t\t\tfor (int k = 0; k < s; k++)",
			"\t\t\t\t{",
			"\t\t\t\t\tres.m[i][j] += m[i][k] * a.m[k][j];",
			"\t\t\t\t\tres.m[i][j] %= mod;",
			"\t\t\t\t}",
			"\t\t\t}",
			"\t\t}",
			"\t\treturn res;",
			"\t}",
			"};",
			"int Fib(int n)",
			"{",
			"\tMat res;",
			"\tres.identity();",
			"\tMat T;",
			"\tT.m[0][0] = T.m[0][1] = T.m[1][0] = 1;",
			"\tif (n <= 2)",
			"\t\treturn 1;",
			"\tn -= 2;",
			"\twhile (n)",
			"\t{",
			"\t\tif (n & 1)",
			"\t\t{",
			"\t\tres = res * T;",
			"\t\t}",
			"\tT = T * T;",
			"\t\tn /= 2;",
			"\t}",
			"\treturn (res.m[0][0] + res.m[0][1]) % mod;",
			"}",
		],
		"description": "Log output to console"
	}
}